#!/usr/bin/env node

var fs = require('fs');
var optimist = require('optimist');
var mongo = require('mongodb');
var geocoder = require('geocoder');
var _ = require('lodash');

var argv = optimist
	.usage('Geocode a MongoDB collection. Talks to a Google-style geocoder.\nUsage: $0')
	.options('d', {
		demand: true,
		alias: 'database',
		describe: 'the MongoDB database'
	})
	.options('c', {
		demand: true,
		alias: 'collection',
		describe: 'the MongoDB collection'
	})
	.options('f', {
		demand: true,
		alias: 'fields',
		describe: 'a comma-separated list of address fields, in order'
	})
	.options('h', {
		demand: false,
		alias: 'host',
		describe: 'the geocoder host',
		default: 'localhost'
	})
	.options('p', {
		demand: false,
		alias: 'port',
		describe: 'the geocoder port',
		default: 8080
	})
	.options('s', {
		demand: false,
		alias: 'connection',
		describe: 'the MongoDB connection string',
		default: 'mongodb://127.0.0.1:27017/'
	})
	.argv;

var MongoClient = mongo.MongoClient;

var summary = [];

MongoClient.connect(argv.connection + argv.database, function(err, db) {

	var collection = db.collection(argv.collection);
	var counter = 0;

	collection.count(function(err, count) {

		// tell pace how many elements we're going to process
		var pace = require('pace')({
			total: count,
			itemType: 'documents'
		});

		collection.find().each(function(err, doc) {

			if (doc) {

				// create the address
				var address = argv.fields.split(',').map(function(value) {
					return doc[value];
				}).join(', ');

				geocoder.geocode(address, function (err, data) {

					var status = data.status;

					if (status === 'ZERO_RESULTS') {
						summary.push(status);
					} else {
						summary.push(data.results[0].geometry.location_type);
					}

					var updates = {Geocode: data};
					collection.update({_id:doc._id}, {$set:updates}, function(err, inserted) {

						counter++;

						pace.op(counter);

						if (counter >= count) {
							db.close();
							console.log("Summary:");
							console.log(JSON.stringify(_.countBy(summary, function(v) { return v; }), null, 2));
						}

					});

				}, {}, argv.host, argv.port);

			}

		});

	});

});
